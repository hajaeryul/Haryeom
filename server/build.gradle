buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    //querydsl 추가
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.ioi'
version = '0.0.1-SNAPSHOT'
java {
    sourceCompatibility = '11'
}

ext["hibernate.version"] = "5.6.5.Final"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {

    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-messaging'
    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // H2
//    runtimeOnly 'com.h2database:h2'
    // mariadb
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    // mongodb
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    // swagger
//	implementation 'io.springfox:springfox-boot-starter:3.0.0'
//	implementation 'io.springfox:springfox-swagger-ui:3.0.0'

    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    //OAuth
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // JSon
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
    // JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
    // UNIVCERT
    implementation 'com.github.in-seo:univcert:master-SNAPSHOT'
    // S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    // S3 SDK
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.12.529')
    implementation 'com.amazonaws:aws-java-sdk-s3'
    // PDFBox
    implementation 'org.apache.pdfbox:pdfbox:2.0.29'
    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.projectreactor:reactor-test'
    // mockito
    testImplementation 'org.mockito:mockito-core:4.8.0'
    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}" // querydsl 라이브러리
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}" //  Querydsl 관련 코드 생성 기능 제공
    // WebFlux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'org.apache.commons:commons-lang3:3.12.0'

}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
}

//querydsl 추가 시작 (위에 plugin 추가 부분과 맞물림)
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets { // IDE의 소스 폴더에 자동으로 넣어준다.
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath // 컴파일이 될때 같이 수행
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl // Q파일을 생성해준다.
}
